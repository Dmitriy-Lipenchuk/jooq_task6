package ru.gamesphere.util;import org.junit.jupiter.api.Test;import org.junit.jupiter.params.ParameterizedTest;import org.junit.jupiter.params.provider.Arguments;import org.junit.jupiter.params.provider.MethodSource;import ru.gamesphere.AbstractConsoleOutputTest;import java.sql.Timestamp;import java.util.Calendar;import java.util.GregorianCalendar;import java.util.stream.Stream;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.params.provider.Arguments.arguments;class ReportGeneratorTest extends AbstractConsoleOutputTest {    @Test    void getFirstTenOrganisationsByProductQuantity() {        ReportGenerator.getFirstTenOrganisationsByProductQuantity();        String topTenOrganisations = "Nvidia72" +                "Kingston70" +                "Intel66";        assertEquals(topTenOrganisations, outputStream.toString().replaceAll("\\s+", ""));    }    @ParameterizedTest    @MethodSource("dataForOrganisationsByProductQuantity")    void getOrganisationsByProductQuantity(int threshold, String toCompare) {        ReportGenerator.getOrganisationsByProductQuantity(threshold);        assertEquals(toCompare, outputStream.toString().replaceAll("\\s+", ""));    }    static Stream<Arguments> dataForOrganisationsByProductQuantity() {        return Stream.of(                arguments(60, "Nvidia72" + "Kingston70" + "Intel66"),                arguments(66, "Nvidia72" + "Kingston70"),                arguments(70, "Nvidia72")        );    }    @ParameterizedTest    @MethodSource("dataForQuantityAndSumOfProductsByPeriodForEachDay")    void getQuantityAndSumOfProductsByPeriodForEachDay(Timestamp start, Timestamp end, String toCompare) {        ReportGenerator.getQuantityAndSumOfProductsByPeriodForEachDay(start, end);        assertEquals(toCompare, outputStream.toString().replaceAll("\\s+", ""));    }    static Stream<Arguments> dataForQuantityAndSumOfProductsByPeriodForEachDay() {        return Stream.of(                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        "2022-10-01" + "00:00:00.0" + "CPU" + "2500" + "11" +                                "2022-10-01" + "00:00:00.0" + "GPU" + "800" + "10" +                                "2022-10-01" + "00:00:00.0" + "RAM" + "100" + "10" +                                "Total:" + "3400" + "31"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 2).getTimeInMillis()),                        "2022-10-01" + "00:00:00.0" + "CPU" + "2500" + "11" +                                "2022-10-01" + "00:00:00.0" + "GPU" + "800" + "10" +                                "2022-10-01" + "00:00:00.0" + "RAM" + "100" + "10" +                                "2022-10-02" + "00:00:00.0" + "GPU" + "5000" + "11" +                                "2022-10-02" + "00:00:00.0" + "RAM" + "110" + "5" +                                "Total:" + "8510" + "47"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 3).getTimeInMillis()),                        "2022-10-01" + "00:00:00.0" + "CPU" + "2500" + "11" +                                "2022-10-01" + "00:00:00.0" + "GPU" + "800" + "10" +                                "2022-10-01" + "00:00:00.0" + "RAM" + "100" + "10" +                                "2022-10-02" + "00:00:00.0" + "GPU" + "5000" + "11" +                                "2022-10-02" + "00:00:00.0" + "RAM" + "110" + "5" +                                "2022-10-03" + "00:00:00.0" + "CPU" + "400" + "50" +                                "2022-10-03" + "00:00:00.0" + "RAM" + "289" + "111" +                                "Total:" + "9199" + "208"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 10).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 20).getTimeInMillis()),                        "Total:" + "0" + "0")        );    }    @ParameterizedTest    @MethodSource("dataForAveragePriceByPeriod")    void getAveragePriceByPeriod(Timestamp start, Timestamp end, String toCompare) {        ReportGenerator.getAveragePriceByPeriod(start, end);        assertEquals(toCompare, outputStream.toString().replaceAll("\\s+", ""));    }    static Stream<Arguments> dataForAveragePriceByPeriod() {        return Stream.of(                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        "CPU" + "1250" +                                "GPU" + "800" +                                "RAM" + "100"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 2).getTimeInMillis()),                        "CPU" + "1250" +                                "GPU" + "1450" +                                "RAM" + "105"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 3).getTimeInMillis()),                        "CPU" + "966" +                                "GPU" + "1450" +                                "RAM" + "99"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 10).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 20).getTimeInMillis()),                        "")        );    }    @ParameterizedTest    @MethodSource("dataCompanyProductListByPeriod")    void getCompanyProductListByPeriod(Timestamp start, Timestamp end, String toCompare) {        ReportGenerator.getCompanyProductListByPeriod(start, end);        assertEquals(toCompare, outputStream.toString().replaceAll("\\s+", ""));    }    static Stream<Arguments> dataCompanyProductListByPeriod() {        return Stream.of(                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        "Intel" + "CPU" +                                "Kingston" + "RAM" +                                "Nvidia" + "GPU"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 2).getTimeInMillis()),                        "Intel" + "CPU" +                                "Intel" + "GPU" +                                "Kingston" + "RAM" +                                "Nvidia" + "GPU"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 1).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 3).getTimeInMillis()),                        "Intel" + "CPU" +                                "Intel" + "GPU" +                                "Kingston" + "RAM" +                                "Nvidia" + "GPU" +                                "Nvidia" + "RAM"),                arguments(new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 10).getTimeInMillis()),                        new Timestamp(new GregorianCalendar(2022, Calendar.OCTOBER, 20).getTimeInMillis()),                        "Intel" +                                "Kingston" +                                "Nvidia")        );    }}