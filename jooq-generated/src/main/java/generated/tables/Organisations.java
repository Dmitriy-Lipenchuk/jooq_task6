/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.OrganisationsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organisations extends TableImpl<OrganisationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.organisations</code>
     */
    public static final Organisations ORGANISATIONS = new Organisations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganisationsRecord> getRecordType() {
        return OrganisationsRecord.class;
    }

    /**
     * The column <code>public.organisations.id</code>.
     */
    public final TableField<OrganisationsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.organisations.name</code>.
     */
    public final TableField<OrganisationsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.organisations.inn</code>.
     */
    public final TableField<OrganisationsRecord, Integer> INN = createField(DSL.name("inn"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.organisations.bank_account</code>.
     */
    public final TableField<OrganisationsRecord, Integer> BANK_ACCOUNT = createField(DSL.name("bank_account"), SQLDataType.INTEGER, this, "");

    private Organisations(Name alias, Table<OrganisationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Organisations(Name alias, Table<OrganisationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.organisations</code> table reference
     */
    public Organisations(String alias) {
        this(DSL.name(alias), ORGANISATIONS);
    }

    /**
     * Create an aliased <code>public.organisations</code> table reference
     */
    public Organisations(Name alias) {
        this(alias, ORGANISATIONS);
    }

    /**
     * Create a <code>public.organisations</code> table reference
     */
    public Organisations() {
        this(DSL.name("organisations"), null);
    }

    public <O extends Record> Organisations(Table<O> child, ForeignKey<O, OrganisationsRecord> key) {
        super(child, key, ORGANISATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrganisationsRecord, Integer> getIdentity() {
        return (Identity<OrganisationsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrganisationsRecord> getPrimaryKey() {
        return Keys.ORGANISATIONS_PKEY;
    }

    @Override
    public List<UniqueKey<OrganisationsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ORGANISATIONS_INN_KEY, Keys.ORGANISATIONS_BANK_ACCOUNT_KEY);
    }

    @Override
    public Organisations as(String alias) {
        return new Organisations(DSL.name(alias), this);
    }

    @Override
    public Organisations as(Name alias) {
        return new Organisations(alias, this);
    }

    @Override
    public Organisations as(Table<?> alias) {
        return new Organisations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisations rename(String name) {
        return new Organisations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisations rename(Name name) {
        return new Organisations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisations rename(Table<?> name) {
        return new Organisations(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
